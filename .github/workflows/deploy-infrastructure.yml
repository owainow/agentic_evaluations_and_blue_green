name: Deploy Azure AI Foundry Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod
        default: 'dev'
      resource_group_name:
        description: 'Resource group name'
        required: true
        type: string
        default: 'rg-aifoundry-dev'
      location:
        description: 'Azure region'
        required: true
        type: choice
        options:
          - eastus
          - eastus2
          - westus
          - westus2
          - westus3
          - centralus
          - northeurope
          - westeurope
          - uksouth
          - australiaeast
        default: 'eastus'
      base_name:
        description: 'Base name for resources (2-10 chars, leave empty for "aif")'
        required: false
        type: string
        default: 'aif'

permissions:
  id-token: write
  contents: read

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  validate:
    name: Validate BICEP Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate BICEP template
        run: |
          az bicep build --file infrastructure/main.bicep
          echo "✅ BICEP template is valid"

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      ai_foundry_name: ${{ steps.deploy.outputs.ai_foundry_name }}
      project_name: ${{ steps.deploy.outputs.project_name }}
      endpoint: ${{ steps.deploy.outputs.endpoint }}
      function_app_name: ${{ steps.deploy.outputs.function_app_name }}
      function_app_url: ${{ steps.deploy.outputs.function_app_url }}
      resource_group: ${{ inputs.resource_group_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group
        run: |
          echo "📦 Creating resource group: ${{ inputs.resource_group_name }}"
          az group create \
            --name ${{ inputs.resource_group_name }} \
            --location ${{ inputs.location }} \
            --tags Environment=${{ inputs.environment }} DeployedBy=GitHubActions

      - name: Purge Soft-Deleted Resources
        continue-on-error: true
        run: |
          echo "🗑️ Checking for soft-deleted resources..."
          
          # Purge soft-deleted Cognitive Services accounts
          echo "Checking Cognitive Services accounts..."
          DELETED_ACCOUNTS=$(az cognitiveservices account list-deleted \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --query "[?location=='${{ inputs.location }}'].name" -o tsv)
          
          if [ -n "$DELETED_ACCOUNTS" ]; then
            echo "Found soft-deleted Cognitive Services accounts to purge:"
            echo "$DELETED_ACCOUNTS"
            
            for ACCOUNT_NAME in $DELETED_ACCOUNTS; do
              echo "Purging Cognitive Services account: $ACCOUNT_NAME"
              az cognitiveservices account purge \
                --name "$ACCOUNT_NAME" \
                --resource-group ${{ inputs.resource_group_name }} \
                --location ${{ inputs.location }} || true
            done
          else
            echo "No soft-deleted Cognitive Services accounts found."
          fi
          
          # Purge soft-deleted Key Vaults
          echo ""
          echo "Checking Key Vaults..."
          DELETED_VAULTS=$(az keyvault list-deleted \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --query "[?properties.location=='${{ inputs.location }}'].name" -o tsv)
          
          if [ -n "$DELETED_VAULTS" ]; then
            echo "Found soft-deleted Key Vaults to purge:"
            echo "$DELETED_VAULTS"
            
            for VAULT_NAME in $DELETED_VAULTS; do
              echo "Purging Key Vault: $VAULT_NAME"
              az keyvault purge \
                --name "$VAULT_NAME" \
                --location ${{ inputs.location }} || true
            done
          else
            echo "No soft-deleted Key Vaults found."
          fi
          
          echo ""
          echo "✅ Purge complete. Waiting 10 seconds for Azure to process..."
          sleep 10

      - name: What-If Analysis
        continue-on-error: true
        run: |
          echo "🔍 Running What-If analysis..."
          echo "This preview shows what resources will be created/modified."
          echo ""
          
          az deployment group what-if \
            --resource-group ${{ inputs.resource_group_name }} \
            --template-file infrastructure/main.bicep \
            --parameters baseName="${{ inputs.base_name }}" \
                        environment=${{ inputs.environment }} \
                        location=${{ inputs.location }} \
            --result-format FullResourcePayloads

      - name: Deploy Infrastructure
        id: deploy
        run: |
          DEPLOYMENT_NAME="aifoundry-$(date +%Y%m%d-%H%M%S)"
          
          echo "🚀 Deploying Azure AI Foundry infrastructure..."
          echo "   Environment: ${{ inputs.environment }}"
          echo "   Resource Group: ${{ inputs.resource_group_name }}"
          echo "   Location: ${{ inputs.location }}"
          echo "   Base Name: ${{ inputs.base_name }}"
          echo ""
          
          az deployment group create \
            --name $DEPLOYMENT_NAME \
            --resource-group ${{ inputs.resource_group_name }} \
            --template-file infrastructure/main.bicep \
            --parameters baseName="${{ inputs.base_name }}" \
                        environment=${{ inputs.environment }} \
                        location=${{ inputs.location }}
          
          echo ""
          echo "✅ Deployment completed successfully!"
          echo ""
          
          # Get outputs
          echo "📊 Deployment Outputs:"
          OUTPUTS=$(az deployment group show \
            --name $DEPLOYMENT_NAME \
            --resource-group ${{ inputs.resource_group_name }} \
            --query properties.outputs)
          
          echo "$OUTPUTS" | jq .
          
          # Set outputs for next jobs (updated to match new Foundry template outputs)
          AI_FOUNDRY_NAME=$(echo $OUTPUTS | jq -r '.aiFoundryName.value')
          PROJECT_NAME=$(echo $OUTPUTS | jq -r '.projectName.value')
          PROJECT_ENDPOINT=$(echo $OUTPUTS | jq -r '.projectEndpoint.value')
          FUNCTION_APP_NAME=$(echo $OUTPUTS | jq -r '.functionAppName.value')
          FUNCTION_APP_URL=$(echo $OUTPUTS | jq -r '.functionAppUrl.value')
          
          echo "ai_foundry_name=$AI_FOUNDRY_NAME" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "endpoint=$PROJECT_ENDPOINT" >> $GITHUB_OUTPUT
          echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "function_app_url=$FUNCTION_APP_URL" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          # List all resources
          echo "Resources created:"
          az resource list \
            --resource-group ${{ inputs.resource_group_name }} \
            --output table
          
          # Check AI Foundry Resource (Cognitive Services Account)
          echo ""
          echo "Checking AI Foundry Resource..."
          az cognitiveservices account show \
            --name ${{ steps.deploy.outputs.ai_foundry_name }} \
            --resource-group ${{ inputs.resource_group_name }} \
            --query "{Name:name, Kind:kind, Location:location, Endpoint:properties.endpoint, ProvisioningState:properties.provisioningState}" \
            --output table
          
          echo ""
          echo "✅ Verification complete!"
          echo "🔗 Project Endpoint: ${{ steps.deploy.outputs.endpoint }}"

  deploy-functions:
    name: Deploy Azure Functions
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure Functions Core Tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
          sudo apt-get update
          sudo apt-get install azure-functions-core-tools-4

      - name: Install Function Dependencies
        run: |
          cd functions
          pip install -r requirements.txt

      - name: Deploy Functions
        run: |
          echo "🚀 Deploying functions to: ${{ needs.deploy.outputs.function_app_name }}"
          cd functions
          func azure functionapp publish ${{ needs.deploy.outputs.function_app_name }} --python

      - name: Test Function Deployment
        run: |
          echo "🧪 Testing deployed functions..."
          FUNCTION_URL="${{ needs.deploy.outputs.function_app_url }}"
          
          # Wait a moment for functions to be ready
          echo "Waiting 30 seconds for functions to initialize..."
          sleep 30
          
          # Test weather function
          echo "Testing weather function..."
          curl -X POST "$FUNCTION_URL/api/get_weather" \
            -H "Content-Type: application/json" \
            -d '{"location": "London", "unit": "celsius"}' \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 \
            --fail --show-error || echo "❌ Weather function test failed"
          
          # Test news function  
          echo "Testing news function..."
          curl -X POST "$FUNCTION_URL/api/get_news_articles" \
            -H "Content-Type: application/json" \
            -d '{"topic": "technology", "max_articles": 3}' \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 \
            --fail --show-error || echo "❌ News function test failed"
          
          echo "✅ Function deployment testing complete!"

  post-deployment:
    name: Post-Deployment Steps
    runs-on: ubuntu-latest
    needs: [deploy, deploy-functions]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create GitHub Environment Variables
        run: |
          echo "💾 Saving deployment information..."
          echo "AI_FOUNDRY_NAME=${{ needs.deploy.outputs.ai_foundry_name }}" >> deployment-info.txt
          echo "PROJECT_NAME=${{ needs.deploy.outputs.project_name }}" >> deployment-info.txt
          echo "ENDPOINT=${{ needs.deploy.outputs.endpoint }}" >> deployment-info.txt
          echo "FUNCTION_APP_NAME=${{ needs.deploy.outputs.function_app_name }}" >> deployment-info.txt
          echo "FUNCTION_APP_URL=${{ needs.deploy.outputs.function_app_url }}" >> deployment-info.txt
          echo "RESOURCE_GROUP=${{ needs.deploy.outputs.resource_group }}" >> deployment-info.txt
          echo "ENVIRONMENT=${{ inputs.environment }}" >> deployment-info.txt
          echo "" >> deployment-info.txt
          echo "# Required permission command for GitHub Actions agent deployment:" >> deployment-info.txt
          echo "az role assignment create \\" >> deployment-info.txt
          echo "  --assignee ${{ secrets.AZURE_CLIENT_ID }} \\" >> deployment-info.txt
          echo "  --role \"Azure AI Developer\" \\" >> deployment-info.txt
          echo "  --scope \"/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.deploy.outputs.resource_group }}/providers/Microsoft.CognitiveServices/accounts/${{ needs.deploy.outputs.ai_foundry_name }}\"" >> deployment-info.txt
          
          cat deployment-info.txt

      - name: Create Summary
        run: |
          echo "# 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | \`${{ needs.deploy.outputs.resource_group }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Location | \`${{ inputs.location }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Base Name | \`${{ inputs.base_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| AI Foundry Name | \`${{ needs.deploy.outputs.ai_foundry_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Project Name | \`${{ needs.deploy.outputs.project_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Project Endpoint | \`${{ needs.deploy.outputs.endpoint }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Function App Name | \`${{ needs.deploy.outputs.function_app_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Function App URL | \`${{ needs.deploy.outputs.function_app_url }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Azure AI Foundry Portal](https://ai.azure.com)" >> $GITHUB_STEP_SUMMARY
          echo "- [Azure Portal - Resource Group](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.deploy.outputs.resource_group }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Assign Agent Permissions** (Required for GitHub Actions):" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Grant your GitHub Actions service principal the 'Azure AI Developer' role" >> $GITHUB_STEP_SUMMARY
          echo "az role assignment create \\" >> $GITHUB_STEP_SUMMARY
          echo "  --assignee ${{ secrets.AZURE_CLIENT_ID }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --role \"Azure AI Developer\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  --scope \"/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.deploy.outputs.resource_group }}/providers/Microsoft.CognitiveServices/accounts/${{ needs.deploy.outputs.ai_foundry_name }}\"" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📖 **Detailed Guide**: [Agent Permissions Setup](docs/AGENT_PERMISSIONS_SETUP.md)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. Visit [Azure AI Foundry](https://ai.azure.com)" >> $GITHUB_STEP_SUMMARY
          echo "3. Select project: **${{ needs.deploy.outputs.project_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "4. Deploy a model (e.g., gpt-4o)" >> $GITHUB_STEP_SUMMARY
          echo "5. Create agents using the deployed functions!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚡ Deployed Functions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your Azure Functions are now deployed and ready to use:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Weather Function**: \`${{ needs.deploy.outputs.function_app_url }}/api/get_weather\`" >> $GITHUB_STEP_SUMMARY
          echo "- **News Function**: \`${{ needs.deploy.outputs.function_app_url }}/api/get_news_articles\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🤖 Create Your First Agent" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```python' >> $GITHUB_STEP_SUMMARY
          echo 'from azure.ai.projects import AIProjectClient' >> $GITHUB_STEP_SUMMARY
          echo 'from azure.identity import DefaultAzureCredential' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo 'client = AIProjectClient(' >> $GITHUB_STEP_SUMMARY
          echo "    endpoint=\"${{ needs.deploy.outputs.endpoint }}\"," >> $GITHUB_STEP_SUMMARY
          echo '    credential=DefaultAzureCredential()' >> $GITHUB_STEP_SUMMARY
          echo ')' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo 'with client:' >> $GITHUB_STEP_SUMMARY
          echo '    agent = client.agents.create_agent(' >> $GITHUB_STEP_SUMMARY
          echo '        model="gpt-4o",  # Your deployed model name' >> $GITHUB_STEP_SUMMARY
          echo '        name="my-assistant",' >> $GITHUB_STEP_SUMMARY
          echo '        instructions="You are a helpful AI assistant."' >> $GITHUB_STEP_SUMMARY
          echo '    )' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload Deployment Info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ inputs.environment }}
          path: deployment-info.txt
          retention-days: 90

  setup-knowledge-base:
    name: Setup Knowledge Base
    runs-on: ubuntu-latest
    needs: [deploy, deploy-functions]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Deployment Outputs
        id: get-outputs
        run: |
          echo "🔍 Getting deployment outputs..."
          
          # Get the latest deployment name
          DEPLOYMENT_NAME=$(az deployment group list \
            --resource-group ${{ needs.deploy.outputs.resource_group }} \
            --query "[?starts_with(name, 'aifoundry-')] | sort_by(@, &properties.timestamp) | [-1].name" \
            --output tsv)
          
          echo "Latest deployment: $DEPLOYMENT_NAME"
          
          # Get deployment outputs
          OUTPUTS=$(az deployment group show \
            --name $DEPLOYMENT_NAME \
            --resource-group ${{ needs.deploy.outputs.resource_group }} \
            --query properties.outputs)
          
          echo "$OUTPUTS" | jq .
          
          # Save outputs to file
          echo "$OUTPUTS" > deployment-outputs.json
          
          # Extract specific values for environment variables
          SEARCH_SERVICE_NAME=$(echo $OUTPUTS | jq -r '.searchServiceName.value // empty')
          STORAGE_ACCOUNT_NAME=$(echo $OUTPUTS | jq -r '.storageAccountName.value // empty') 
          AI_FOUNDRY_NAME=$(echo $OUTPUTS | jq -r '.aiFoundryName.value // empty')
          
          echo "search_service_name=$SEARCH_SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
          echo "ai_foundry_name=$AI_FOUNDRY_NAME" >> $GITHUB_OUTPUT

      - name: Assign Required Permissions
        run: |
          echo "🔐 Assigning required permissions for knowledge base setup..."
          
          # Get the service principal object ID
          SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query id --output tsv)
          
          # Assign Search Index Data Contributor role
          echo "Assigning Search Index Data Contributor role..."
          az role assignment create \
            --assignee-object-id $SP_OBJECT_ID \
            --assignee-principal-type ServicePrincipal \
            --role "Search Index Data Contributor" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.deploy.outputs.resource_group }}/providers/Microsoft.Search/searchServices/${{ steps.get-outputs.outputs.search_service_name }}" \
            --output none || echo "Role already assigned or assignment failed"
          
          # Assign Search Service Contributor role
          echo "Assigning Search Service Contributor role..."
          az role assignment create \
            --assignee-object-id $SP_OBJECT_ID \
            --assignee-principal-type ServicePrincipal \
            --role "Search Service Contributor" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.deploy.outputs.resource_group }}/providers/Microsoft.Search/searchServices/${{ steps.get-outputs.outputs.search_service_name }}" \
            --output none || echo "Role already assigned or assignment failed"
          
          # Assign Storage Blob Data Contributor role
          echo "Assigning Storage Blob Data Contributor role..."
          az role assignment create \
            --assignee-object-id $SP_OBJECT_ID \
            --assignee-principal-type ServicePrincipal \
            --role "Storage Blob Data Contributor" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.deploy.outputs.resource_group }}/providers/Microsoft.Storage/storageAccounts/${{ steps.get-outputs.outputs.storage_account_name }}" \
            --output none || echo "Role already assigned or assignment failed"
          
          # Assign Cognitive Services OpenAI User role
          echo "Assigning Cognitive Services OpenAI User role..."
          az role assignment create \
            --assignee-object-id $SP_OBJECT_ID \
            --assignee-principal-type ServicePrincipal \
            --role "Cognitive Services OpenAI User" \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.deploy.outputs.resource_group }}/providers/Microsoft.CognitiveServices/accounts/${{ steps.get-outputs.outputs.ai_foundry_name }}" \
            --output none || echo "Role already assigned or assignment failed"
          
          echo "✅ Permission assignment completed"

      - name: Setup Knowledge Base
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          DEPLOYMENT_OUTPUTS_FILE: deployment-outputs.json
        run: |
          echo "📚 Setting up Azure AI Search knowledge base..."
          echo "This will:"
          echo "  1. Generate weather and news PDF data"
          echo "  2. Upload PDFs to blob storage"
          echo "  3. Create Azure AI Search index with integrated vectorization"
          echo "  4. Set up automated indexing pipeline"
          echo ""
          
          # Run the knowledge base setup
          python scripts/setup_knowledge_base.py

      - name: Upload Knowledge Base Summary
        uses: actions/upload-artifact@v4
        with:
          name: knowledge-base-summary-${{ inputs.environment }}
          path: knowledge-base-setup-summary.md
          retention-days: 90

      - name: Update Summary with Knowledge Base Info
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📚 Knowledge Base Setup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "knowledge-base-setup-summary.md" ]; then
            # Check if setup was successful
            if grep -q "Setup Completed Successfully" knowledge-base-setup-summary.md; then
              echo "✅ **Knowledge Base Setup: SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Your Azure AI Search service is now populated with:" >> $GITHUB_STEP_SUMMARY
              echo "- Historical weather data across multiple cities" >> $GITHUB_STEP_SUMMARY
              echo "- Climate and weather-related news articles" >> $GITHUB_STEP_SUMMARY
              echo "- Integrated vectorization pipeline for automatic processing" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔍 Search Service Details" >> $GITHUB_STEP_SUMMARY
              echo "- **Service Name**: \`${{ steps.get-outputs.outputs.search_service_name }}\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Index Name**: \`knowledge-vector-index\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Endpoint**: \`https://${{ steps.get-outputs.outputs.search_service_name }}.search.windows.net\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🎯 Ready for Agent Integration" >> $GITHUB_STEP_SUMMARY
              echo "Your agent can now use this knowledge base for RAG (Retrieval-Augmented Generation):" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```python' >> $GITHUB_STEP_SUMMARY
              echo 'from azure.search.documents import SearchClient' >> $GITHUB_STEP_SUMMARY
              echo 'from azure.identity import DefaultAzureCredential' >> $GITHUB_STEP_SUMMARY
              echo '' >> $GITHUB_STEP_SUMMARY
              echo 'search_client = SearchClient(' >> $GITHUB_STEP_SUMMARY
              echo "    endpoint=\"https://${{ steps.get-outputs.outputs.search_service_name }}.search.windows.net\"," >> $GITHUB_STEP_SUMMARY
              echo '    index_name="knowledge-vector-index",' >> $GITHUB_STEP_SUMMARY
              echo '    credential=DefaultAzureCredential()' >> $GITHUB_STEP_SUMMARY
              echo ')' >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Knowledge Base Setup: FAILED**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "The knowledge base setup encountered errors. Check the logs and the uploaded summary for details." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Knowledge Base Setup: NO SUMMARY GENERATED**" >> $GITHUB_STEP_SUMMARY
          fi
