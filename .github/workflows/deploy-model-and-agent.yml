name: Deploy Model and Create Agent

# Prerequisites:
# 1. Service principal with Contributor role (for resource deployment)
# 2. Service principal with "Cognitive Services OpenAI User" role (for assistant creation)
# See docs/GITHUB_ACTIONS_SETUP.md for complete setup instructions

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod
        default: 'dev'
      
      model_name:
        description: 'Model to deploy'
        required: true
        type: choice
        options:
          - gpt-4o
          - gpt-4o-mini
          - gpt-4
          - gpt-4-turbo
          - gpt-35-turbo
          - gpt-35-turbo-16k
        default: 'gpt-4o'
      
      model_version:
        description: 'Model version'
        required: true
        type: string
        default: '2024-11-20'
      
      deployment_name:
        description: 'Name for the model deployment (leave empty to auto-generate)'
        required: false
        type: string
      
      sku_name:
        description: 'Deployment SKU type'
        required: true
        type: choice
        options:
          - Standard
          - GlobalStandard
          - DataZoneStandard
        default: 'Standard'
      
      capacity:
        description: 'Deployment capacity (TPM in thousands)'
        required: true
        type: number
        default: 10
      
      agent_name:
        description: 'Name for the agent'
        required: true
        type: string
        default: 'test-agent'
      
      agent_instructions:
        description: 'Instructions for the agent'
        required: true
        type: string
        default: 'You are a helpful AI assistant that provides accurate and concise answers.'

permissions:
  id-token: write
  contents: read

env:
  AZURE_SUBSCRIPTION_ID: '269eee56-58bc-45eb-9dca-4d22421c45fa'
  RESOURCE_GROUP: 'rg-aifoundry-dev'
  LOCATION: 'eastus'

jobs:
  deploy-model-and-agent:
    name: Deploy Model and Create Agent
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      
      - name: Generate deployment name
        id: deployment_name
        shell: bash
        run: |
          if [ -n "${{ inputs.deployment_name }}" ]; then
            DEPLOYMENT_NAME="${{ inputs.deployment_name }}"
          else
            # Auto-generate deployment name: model-environment-timestamp
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            DEPLOYMENT_NAME="${{ inputs.model_name }}-${{ inputs.environment }}-${TIMESTAMP}"
          fi
          echo "deployment_name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
          echo "Generated deployment name: ${DEPLOYMENT_NAME}"
      
      - name: Get AI Services name
        id: ai_services
        shell: bash
        run: |
          # Get the AI Services account name from the existing deployment
          AI_SERVICES_NAME=$(az cognitiveservices account list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "[?kind=='AIServices'].name | [0]" \
            -o tsv)
          
          if [ -z "$AI_SERVICES_NAME" ]; then
            echo "Error: No AI Services account found in resource group"
            exit 1
          fi
          
          echo "ai_services_name=${AI_SERVICES_NAME}" >> $GITHUB_OUTPUT
          echo "Found AI Services account: ${AI_SERVICES_NAME}"
      
      - name: Deploy Model
        id: deploy_model
        shell: bash
        run: |
          echo "Deploying ${{ inputs.model_name }} (version ${{ inputs.model_version }})..."
          
          # Deploy using BICEP template
          DEPLOYMENT_OUTPUT=$(az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infrastructure/model-deployment.bicep \
            --parameters \
              aiServicesName="${{ steps.ai_services.outputs.ai_services_name }}" \
              deploymentName="${{ steps.deployment_name.outputs.deployment_name }}" \
              modelName="${{ inputs.model_name }}" \
              modelVersion="${{ inputs.model_version }}" \
              skuName="${{ inputs.sku_name }}" \
              capacity=${{ inputs.capacity }} \
            --query 'properties.outputs' \
            -o json)
          
          echo "Deployment completed!"
          echo "$DEPLOYMENT_OUTPUT" | jq '.'
          
          # Extract outputs
          ENDPOINT=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.endpoint.value')
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.deploymentId.value')
          
          echo "endpoint=${ENDPOINT}" >> $GITHUB_OUTPUT
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
      
      - name: Verify Model Deployment
        shell: bash
        run: |
          echo "Verifying model deployment..."
          
          DEPLOYMENT_STATUS=$(az cognitiveservices account deployment show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ steps.ai_services.outputs.ai_services_name }} \
            --deployment-name ${{ steps.deployment_name.outputs.deployment_name }} \
            --query '{Name:name, Model:properties.model.name, Version:properties.model.version, State:properties.provisioningState, Capacity:sku.capacity}' \
            -o table)
          
          echo "$DEPLOYMENT_STATUS"
      
      - name: Get Azure OpenAI Endpoint
        id: openai_endpoint
        shell: bash
        run: |
          # Get the AI Services account name
          AI_SERVICES_NAME="${{ steps.ai_services.outputs.ai_services_name }}"
          
          # Azure OpenAI endpoint format
          OPENAI_ENDPOINT="https://${AI_SERVICES_NAME}.openai.azure.com/"
          
          echo "openai_endpoint=${OPENAI_ENDPOINT}" >> $GITHUB_OUTPUT
          echo "Azure OpenAI Endpoint: ${OPENAI_ENDPOINT}"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai azure-identity
      
      - name: Create AI Assistant
        id: create_assistant
        continue-on-error: true
        shell: bash
        env:
          AZURE_OPENAI_ENDPOINT: ${{ steps.openai_endpoint.outputs.openai_endpoint }}
          MODEL_DEPLOYMENT_NAME: ${{ steps.deployment_name.outputs.deployment_name }}
          ASSISTANT_NAME: ${{ inputs.agent_name }}
          ASSISTANT_INSTRUCTIONS: ${{ inputs.agent_instructions }}
          API_VERSION: "2024-05-01-preview"
        run: |
          echo "Creating assistant with model deployment: ${MODEL_DEPLOYMENT_NAME}"
          python scripts/create_assistant.py
      
      - name: Assistant Creation Status
        shell: bash
        run: |
          if [ "${{ steps.create_assistant.outcome }}" == "failure" ]; then
            echo "⚠️ Assistant creation failed."
            echo ""
            echo "Common causes:"
            echo "1. Missing 'Cognitive Services OpenAI User' role on the service principal"
            echo "2. Role assignment not yet propagated (can take 5-10 minutes)"
            echo ""
            echo "To fix:"
            echo "1. Go to Azure Portal → AI Services resource → Access control (IAM)"
            echo "2. Add role assignment: 'Cognitive Services OpenAI User'"
            echo "3. Assign to: github-actions-aifoundry (service principal)"
            echo ""
            echo "For detailed instructions, see: docs/GITHUB_ACTIONS_SETUP.md"
            echo ""
            echo "✅ The model deployment was successful and can be used directly."
          else
            echo "✅ Assistant created successfully!"
            echo "Assistant ID: ${{ steps.create_assistant.outputs.assistant_id }}"
          fi
      
      - name: Create Deployment Summary
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🤖 Model Deployment & Agent Creation Summary
          
          ## Deployment Details
          
          | Property | Value |
          |----------|-------|
          | **Environment** | ${{ inputs.environment }} |
          | **Model** | ${{ inputs.model_name }} |
          | **Version** | ${{ inputs.model_version }} |
          | **Deployment Name** | ${{ steps.deployment_name.outputs.deployment_name }} |
          | **SKU** | ${{ inputs.sku_name }} |
          | **Capacity** | ${{ inputs.capacity }} TPM (thousands) |
          | **AI Services** | ${{ steps.ai_services.outputs.ai_services_name }} |
          
          ## Assistant Details
          
          EOF
          
          if [ "${{ steps.create_assistant.outcome }}" == "success" ]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          | Property | Value |
          |----------|-------|
          | **Status** | ✅ Created Successfully |
          | **Assistant Name** | ${{ inputs.agent_name }} |
          | **Assistant ID** | ${{ steps.create_assistant.outputs.assistant_id }} |
          | **Model Deployment** | ${{ steps.deployment_name.outputs.deployment_name }} |
          | **Endpoint** | ${{ steps.openai_endpoint.outputs.openai_endpoint }} |
          EOF
          else
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          | Property | Value |
          |----------|-------|
          | **Status** | ⚠️ Creation Failed |
          | **Assistant Name** | ${{ inputs.agent_name }} (not created) |
          
          > **Note**: Check the logs above for error details.
          > The model deployment is complete and can be used directly.
          EOF
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ## Next Steps
          
          1. **Test the assistant** in Azure AI Foundry portal: [https://ai.azure.com](https://ai.azure.com)
          2. **Use the deployment** directly with Azure OpenAI SDK (see examples in Azure portal)
          3. **Monitor usage** in the AI Services resource
          
          ## Useful Commands
          
          \`\`\`bash
          # List all deployments
          az cognitiveservices account deployment list \\
            --resource-group ${{ env.RESOURCE_GROUP }} \\
            --name ${{ steps.ai_services.outputs.ai_services_name }}
          
          # Delete this deployment
          az cognitiveservices account deployment delete \\
            --resource-group ${{ env.RESOURCE_GROUP }} \\
            --name ${{ steps.ai_services.outputs.ai_services_name }} \\
            --deployment-name ${{ steps.deployment_name.outputs.deployment_name }}
          \`\`\`
          EOF
    
    outputs:
      deployment_name: ${{ steps.deployment_name.outputs.deployment_name }}
      assistant_id: ${{ steps.create_assistant.outputs.assistant_id }}
      assistant_name: ${{ steps.create_assistant.outputs.assistant_name }}
      openai_endpoint: ${{ steps.openai_endpoint.outputs.openai_endpoint }}
